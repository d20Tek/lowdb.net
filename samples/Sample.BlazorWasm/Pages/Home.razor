@page "/"
@using D20Tek.LowDb
@inject TaskRepository _service;

<PageTitle>Tasks - Home</PageTitle>

<h2>My Tasks</h2>

<div class="col mb-2">
    <button type="button" class="btn btn-primary" @onclick="OnCreate">New Task</button>
</div>

<div class="row">
    <div class="col-12 col-md-6 ms-0">
    <table class="table table-sm table-bordered table-striped">
        <thead>
            <tr>
                <th class="col-2 text-center">Actions</th>
                <th class="col-8">Task</th>
                <th class="col-2 text-center">Done?</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var task in _tasks)
        {
            <tr>
                <td class="text-center">
                    <button class="btn btn-sm" @onclick=@(() => OnUpdate(task))>E</button>
                    <button class="btn btn-sm" @onclick=@(() => OnDelete(task))>D</button>
                </td>
                <td>@task.Name</td>
                <td class="text-center">@(task.IsCompleted ? "Yes" : "No")</td>
            </tr>
        }
        </tbody>
    </table>
    </div>

    <div class="col-12 col-md-6">
        @GetSelectedComponent()
    </div>
</div>

@code{
    public enum TaskComponentType { None, Create, Edit, Delete }

    TaskComponentType _showComponent = TaskComponentType.None;
    TaskEntity[] _tasks = [];
    TaskEntity? _selectedTask = null;

    protected override void OnInitialized() => _tasks = _service.GetTasks();

    private void OnCreate()
    {
        _selectedTask = null;
        _showComponent = TaskComponentType.Create;
    }

    private void OnUpdate(TaskEntity selectedTask)
    {
        _selectedTask = selectedTask;
        _showComponent = TaskComponentType.Edit;
    }

    private void OnDelete(TaskEntity selectedTask)
    {
        _selectedTask = selectedTask;
        _showComponent = TaskComponentType.Delete;
    }

    private void OnTasksUpdated()
    {
        if (_showComponent is TaskComponentType.Delete) _showComponent = TaskComponentType.None;
        _tasks = _service.GetTasks();
    }

    private RenderFragment? GetSelectedComponent() =>
        _showComponent switch
        {
            TaskComponentType.Create => RenderCreateComponent(),
            TaskComponentType.Edit => RenderEditComponent(),
            TaskComponentType.Delete => RenderDeleteComponent(),
            _ => null
        };

    private RenderFragment RenderCreateComponent() => @<CreateTaskComponent TasksUpdated=OnTasksUpdated />;

    private RenderFragment RenderEditComponent() =>
        @<EditTaskComponent Task=_selectedTask TasksUpdated=OnTasksUpdated />;

    private RenderFragment RenderDeleteComponent() =>
        @<DeleteTaskComponent Task=_selectedTask TasksUpdated=OnTasksUpdated />;
}